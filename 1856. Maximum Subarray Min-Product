class Solution {
    public int maxSumMinProduct(int[] nums) {
        int n = nums.length;
        long[] presum = new long[n+1];
        for (int i = 1; i <= n; i++) {
            presum[i] = presum[i-1] + nums[i-1];
        }
        
        Stack<Integer> stack = new Stack<>();
        int[] leftIndex = new int[n];
        int[] rightIndex = new int[n];
        for (int i = 0; i < n; i++) {
            while(!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                leftIndex[i] = 0;
            } else {
                leftIndex[i] = stack.peek() + 1;
            }
            stack.add(i);
        }
        stack = new Stack();
        for (int i = n-1; i >= 0; i--) {
            while(!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (stack.isEmpty()) {
                rightIndex[i] = n - 1;
            } else {
                rightIndex[i] = stack.peek() - 1;
            }
            stack.add(i);
        }
        
        long res = 0;
        for (int i = 0; i < n; i++) {
            int right = rightIndex[i];
            int left = leftIndex[i];
            long cur = (presum[right+1] - presum[left]) * nums[i];
            res = Math.max(res, cur);
        }
    
        return (int) (res % 1_000_000_007);
    }
}
